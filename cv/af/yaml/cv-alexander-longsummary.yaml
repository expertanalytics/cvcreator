Basic:
    Name:   "Alexander Fleischer"
    Address: "Trimveien 6 H626"
    Post:  "0372 Oslo"
    Birth: "10.04.1991"
    Email: "alexander@xal.no"
    Phone: "+47 482 71 967"
    Nationality: "Norwegian"
Summary: >
    I submitted my master thesis in computational physics in the beginning of
    2018. The subject of the thesis was building a C++ application for simulating 
    quantum dots. 
    My goal was to develop code that was up to par with industry standards and I
    had focus on writing unit tests and readable code. 
    In the thesis I used open-source libraries such as Armadillo, UnitTest++, 
    LAPACK and BLAS—where the last two are also C libraries. 
    Utilizing Git for version control was a given part of the thesis and
    I've used it almost entirely throughout my education.
    \\[12pt]
    Most of the programming in my master's thesis was done in C++, 
    but I also have C programming experience from my education. 
    While I did my master's degree I took an additional informatics course,
    INF3380—Parallel Programming for Natural Science Applications in C. 
    The course consisted of two projects where I used the open-source 
    parallel programming MPI and OpenMP libraries to parallelize the process of
    denoising an image and performing matrix multiplication.
    I learnt how to handle communication between processes, using
    data clusters, using the parallelization libraries and typical parallelization. 
    While I haven't worked directly with distributed 
    memory systems and heterogeneous architectures, parallel programming using 
    message passing faces similar challenges, 
    like dead locks and race conditions, 
    and I have basic understanding of the most important concepts of distributed/socket programming. 
    \\[12pt]
    Furthermore, in one of my master courses, FYS4460–Unsorted Systems and Percolation, I 
    developed code for simulating atomic interactions and visualize it using
    the open source software Visual Molecular Dynamics.
    The preferred language to use in the course was C++, but I chose to
    do the project in C. The reason for these choices was that I wanted to write
    and learn more C programming and eventually work with creating Linux applications. 
    \\[12pt]
    Linux is my favored operating system and I like to spend my spare time tinkering with it.
    I personally use Arch Linux,  which requires both common knowlegde about the 
    basic parts of the operating system, like file system layout,
    compiling software manually and how to 
    utilize a terminal. More advanced system administrator skills includes
    controlling various services and deamons for tweaking performance.
    Luckily I got some experience working with Linux parallel to doing my master's thesis.
    I worked part-time (30 \%) as IT support
    for employees and master students at the Department of Physics at the University of Oslo. 
    This included troubleshooting network errors and general office and lab computer problems
    (both Linux and Windows). Most of the IT resources revolved around Linux
    and the department servers were Linux-based and maintained by us.
    Therefore I got some experience working with Linux servers and handling
    and creating user directories.
    I got the opportunity to write small programs to ease and automate
    tasks.
    As an example I made my schedule as an interactive timetable written in Javascript and PHP
    for the convenience of the users as well as a script for easier printing from Linux machines
    at the department.
    Lastly I have basic knowledge of the meteor.js library as I've played around
    with it on my spare time for creating simple applications.
    
Skills:
    Languages:
        - "Python" 
        - "C/C++" 
        - "Javascript"
        - "MATLAB"
        - "PHP"
        - "Bash"
    Frameworks:
        - "Numpy"
        - "Armadillo"
        - "MPI"
    Tools:
        - "Git"
        - "Vim editor"
        - "Unix"
Languages:
    Norwegian: Mother tongue
    English: Fluent
SelectedSkills:
    Programming: >
        During my education, practically every subject involved some
        form of programming and I also enjoy recreational programming and scripting.
    Quick learner: >
        I like to learn, and do so quickly, in particular about programming and science.
    Problem solving: >
        Both my previous work experience and my master thesis has taught me to 
        work independently and assess the task at hand.
    Written communication: >
        I like writing clear and concise texts. 
        Everything from popular science to documenting code.
Education:
    - - 2018
      - 'M.Sc. Computational Physics from the Department of
        Physics, University of Oslo. Title of thesis:  "Monte Carlo Studies of Quantum Dots". Supervisor: Professor
        Morten Hjorth-Jensen.'
    - - 2017
      - 'B.Sc. in Physics, University of Oslo.'
Work:
    - - 2018
      - 'Consultant at Expert Analytics'
    - - 2015–2017
      - '30 \% IT Support at the Department of Physics, University of Oslo'
    - - 2013–2017
      - 'Course Leader at Forskerfabrikken Summer School'
    - - 2013–2014
      - 'Private Tutor at Studenthjelp privatundervisning'
Projects:
    A1:
        Activity: "Stop Poster Production System"
        Staffing: "1 developer"
        Description: >

        Tools: "Python, Javascript"
    A1:
        Activity: "Monte Carlo Studies of Quantum Dots"
        Staffing: "2 researchers"
        Description: >
            For my master thesis, I developed software for finding the ground 
            state energies of quantum dots (fermions) using the variational Monte-Carlo method.
            The program handles different potential wells like the single and double
            harmonic oscillator and the finite square well.
            Furthermore I solved the Schrödinger equation of the potential systems to obtain
            one-particle wavefunctions of the energy states.
            The resulting wavefunction was then written as a linear combination 
            of simple harmonic oscillator basisfunctions which were used in the 
            Monte-Carlo solver and compared against the results of the original Monte-Carlo simulations.
            The code was primarily C++ with some data analysis in Python.
            I put effort and focus on unit testing and writing clean code.
        Tools: "C++, Python"
